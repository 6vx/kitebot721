[{"path":"src\\lib\\text\\devlog\\audio-video.md","title":"audio-video","markdown":"# Audio/Video Editing\r\n\r\n## [FFMPEG](https://ffmpeg.org/ffmpeg.html)\r\n\r\nI was mostly looking for [this](https://trac.ffmpeg.org/wiki/How%20to%20speed%20up%20/%20slow%20down%20a%20video), a way to speed up and slow down video. \r\n\r\nI'll figure out how to crop and rotate as well after testing this out.","url":"audio-video","html":""},{"path":"src\\lib\\text\\devlog\\aws.md","title":"aws","markdown":"# Amazon Web Sevrices\r\n\r\n## [Command Line Interface](https://aws.amazon.com/cli/)\r\n\r\n- Configured with IAM credentials\r\n- Make script that will clone folders up to S3 with public access granted","url":"aws","html":""},{"path":"src\\lib\\text\\devlog\\Chocolatey.md","title":"chocolatey","markdown":"# Chocolatey\r\n\r\n## a windows package manager\r\n\r\nI use choco to update as many things as I can. \r\n\r\nI can update node using the following, for example:\r\n\r\n    choco upgrade nodejs -y\r\n\r\nHere's the script I typically run after reinstalling windows:\r\n\r\n    notepad .\\chocolatey.ps1\r\n    # Setting the permissions and install \r\n    # chocolatey must be done\r\n    # separately using the next command.\r\n    # To check your current installs use \r\n    # 'choco list -localonly'\r\n\r\n    choco install adobereader -y\r\n    choco install audacity -y\r\n    choco install calibre -y\r\n    # choco install discord -y\r\n    choco install git -y\r\n    choco install nodejs -y\r\n    choco install deno -y\r\n    choco install notepadplusplus -y\r\n    choco install qbittorrent -y\r\n    choco install powershell-core -y\r\n    choco install telegram -y\r\n    choco install vlc -y\r\n    choco install vscode -y\r\n    choco install dotnet -y\r\n    choco install steam-client -y\r\n    # choco install ffmpeg -y\r\n    choco install 7zip -y\r\n    choco install tor-browser -y\r\n    # choco install session -y\r\n    # choco install inkscape -y\r\n    choco install youtube-dl -y\r\n    # choco install microsoft-teams.install -y\r\n\r\nI've got a few commented out since they've fallen into disuse, but I wanted to leave them in there for when I inevitably go to dig them up again. ","url":"chocolatey","html":""},{"path":"src\\lib\\text\\devlog\\dmx.md","title":"dmx","markdown":"# dmx\n\ndmx is a hobby/personal-use website. Eventually will be a game. \n\nI've heard the word 'agile' used in tech a lot and, while I don't remember what it means right now, I know that having your data management, data storage, front end, build and content all split apart makes me feel very agile.\n\nWhen imagined so, and built with this ideal in mind, changing any one piece is no longer a herculean task with many headaches.\n\n## enter svelteKit\n\nThis is the new way that you get that Sapper-y goodness. If there's a link, at least. I haven't figured out yet how to assign a parameter to be built programmatically yet without actually making an 'a' tag for each one on a hidden component. \n\nTHERE'S GOT TO BE A BETTER WAY! BUT SINCE IT DOESN'T MATTER I'll move on. (update: I found a better way, and it served this very page if you're reading it online ;)\n\nSvelte is meant to just be that last blip on the screen from json to your eyeballs. I don't want to do a lot of magic here. I want a lightweight client that can keep track of a session and maybe pick up a notification, that's it. The rest should be separated into the last component.\n\nThe smart build. I realize now that the build step is really where the action is. You can separate your data and make your front end nice and static, but unless you're doing this step right, none of that's gonna matter. \n\n## build is life\n\nI've generally used whatever the cheapest t2x ec2 instance with rclone in the past to keep things in sync across providers (ie clone your OneDrive to an S3 bucket, or keep a folder in sync across Google drive and dropbox, etc) but I discovered lambda layers while setting it up this time. I haven't tried to implement it yet but it's an obvious project for a lambda that anyone could benefit from. Putting that on a cron schedule instead of running a microservice seems like a no brainer. \n\nThe separate parts then are:\n  - **mobility first** components and styling\n  - minimal lightweight prebuilt static cdn deploy\n  - build step with batched cms/db/api calls\n  - cloud managed (revisit this to make it a lambda!) storage \n\nSome stuff I encountered that I hadn't before while setting this up:\n  - lambda layers (very exciting) \n  - applying certificates to lambda layers \n  - rclone's nodejs implementation\n  - svelte kit preload/prefetch and module system\n  - elastic beanstalk configuration\n  - how to have a bad time with service workers\n  ","url":"dmx","html":""},{"path":"src\\lib\\text\\devlog\\Markdown.md","title":"markdown","markdown":"# Markdown \r\n\r\n## Goals\r\n\r\nThe idea of using markdown as a separate, disentangled way of storing content for my websites has apparently panned out. \r\n\r\nI've been using powershell & node to execute scripts that generate javascript files from directories of markdown files, and then place them into the project before building. \r\n\r\n## Quandry\r\n\r\nNow that I've gone down this road for a few weeks and feel good about it... I've noticed one problem: linking. \r\n\r\nI have a desire to link between articles, and that has resulted in coupling functionality between my script/site/source. Ideally there should be 0 considerations made while writing with this system. Unfortunately, I'm linking using paths that wouldn't exist if not for my script/project structure. It feels ICKY. \r\n\r\nSo I'm left with this question: how do I link between my markdown files without having 'hardcoding' (in a .md, lol) my routes according to the pattern of my site? \r\n\r\nSolution: ??? (I'll add it here when I find it, contact me if you have an idea <3)\r\n\r\n## New Line\r\n\r\nI've been using [this](https://gist.github.com/shaunlebron/746476e6e7a4d698b373)\r\n\r\n      &nbsp;  ","url":"markdown","html":""},{"path":"src\\lib\\text\\devlog\\PlayFab.md","title":"playfab","markdown":"# PlayFab\n\n## playfab + svelte\n\nI started a separate repository for what I think will be the first of many \"boiler-plate-y\" components I need to break apart for my svelte project.\n\nI don't know why but PlayFab doesn't seem popular. Perhaps it's because it's purpose is not so glamourous. Even though it's pretty sick. Svelte does seem popular, maybe in part due to being a front end framework and right in everyone's face. \n\nAnywho, I don't think I'll be the only one who wants to see examples of how to do all these things.\n\nWhen I was initially converting the JavaScript example into something usable and figuring out how to cache the session tokens between page loads, I ended up with a bit of a monolithic layout script and I didn't like it.\n\nSo separate bits, I'll try to keep my own styling out of it and just have a functional X Y and Z for all the major methods. If somebody wants to see an example of something they can just look at/copy the repo. \n\n## Next\n\nI want to look at these: \n\n- [PlayFab Action Rules](https://docs.microsoft.com/en-gb/gaming/playfab/features/automation/actions-rules/quickstart)\n- [Paypal Docs](https://developer.paypal.com/docs/checkout/)\n- [Payment Processing](https://docs.microsoft.com/en-us/gaming/playfab/features/commerce/economy/non-receipt-payment-processing)","url":"playfab","html":""},{"path":"src\\lib\\text\\devlog\\Powershell.md","title":"powershell","markdown":"## summary\n\r\n- Installing on AWS EC2 \r\n- Piping commands \r\n- Copying/Backing up between remote and local sources\r\n- Scheduling/privileges troubleshooting in Linux CRON and Windows \r\n- Checking directories for attributes, copying and creating files/permissions on a schedule\r\n\r\n# Daily Script\r\n\r\n## Draw every day\r\n\r\nI had the revelation that I'd draw every day if I got the Surface GO. I didn't. \r\n\r\nThen I decided surely I'd draw every day if I opened my computer to a brand new canvas every day, ready to be doodled upon in even the most lazy attempt at art. \r\n\r\nEnter: Powershell. I made a set of blank, root files for my \"canvas.leo\" and a daily \"journal.md\" and this script, after some wrangling, ended up being executed by the windows scheduler somewhat reliably. \r\n\r\nEnter: RCLONE/EC2/BASH. \"Somewhat reliably\" wasn't good enough. If I turned my computer on later in the day, sometimes it would take a while to execute. Such troublesome behaviour was getting in the way of my zen art habit. \r\n\r\nInstead, I'd perform this \"daily script\" in the cloud on a CRONJOB on an EC2 MICRO instance, and then use RCLONE to sync between my ONEDRIVE account and the local files on the EC2. This was better. \r\n\r\n## Draw Sometimes, Conveniently\r\n\r\n### And do other things, too!\r\n\r\nOf course, in the end, I didn't want to draw every day. And relying on a cloud instance to fuel this unusual behaviour was sort of against my \"less is more\" philosophy when it comes to tech. \r\n\r\nSo now my customized Powershell 7 profile just has a script (synced to the cloud of course) that, when the mood strikes, allows me to type \"Draw\" into the terminal at any time to open a correctly dated \"timestamp.leo\" infinite canvas to doodle on. \r\n\r\nSome other common patterns are immortalized as well, such as a script to update a github repo with a timestamped commit message, or to split a projects Terminal window in 3 with a remote TMUX session, a local server and a command line all in one. \r\n\r\n## Feelings\r\n\r\nPowershell is fun. I would be happy to have more excuses to fiddle with it. ","url":"powershell","html":""},{"path":"src\\lib\\text\\devlog\\Refactoring.md","title":"refactoring","markdown":"# 17 months later\n\r\nThis is the biggest gap I've ever gone back to retrieve something I've made before. \r\n\r\nGenerally, I'd just write something new, or start over, but I knew that I'd done at least a bit of grunt work and figured it would be... recoverable. \r\n\r\nDigging through the 20+ javascript files figuring out which were essential was the first task. Luckily only half a dozen remained in the root of the project, the others squirreled away inside an aptly named 'scriptsalongtheway' folder. \r\n\r\nFrom the imports I figured out what data sets I'd need to reconstruct this, I'd apparently learned how to put my ./data folder on gitignore. Smart, kinda. Frustrating now. \r\n\r\nThe dataset's creator is proudly trumpeting v4 when I arrive at the website. I groan, and download while checking the notes to see, indeed, that \"v3 is now fully deprecated and (stuff I want) can be found in a new place!\"\r\n\r\nThe 130+MB JSON file downloads. I run my 17 month old script. It fails. \r\n\r\nOnce again i'm working with a dataset that crashes my editor when I look at it too long, and I'm just trying to get up and running with that to mash it into my other 200,000 entry dictionary and make them compare millions of times. My 2012 i7 weeps softly.\r\n\r\nI refactor one script, it executes. On to another. I retrieve the accompanying data. It executes... but somethings different. \r\n\r\nPerusing the code I discover I had no fucking idea how to work with Objects. I quickly rewrite key sections. It's **actually better** now. \r\n\r\nWith fresh eyes and a little pain on my computer's part (I came back from my bikeride to realize I'd need to redo it with a small adjustment, sorry PC!) we managed to take this shoddy old crap and turn it into something... adequate. Almost. ","url":"refactoring","html":""},{"path":"src\\lib\\text\\devlog\\SEO.md","title":"seo","markdown":"# Pretty descriptions\r\n\r\nThis seems annoying, and I definitely don't want to have to do it again, so;\r\n\r\n## Main Stuff\r\n\r\n- head should contain \r\n  - meta tags named description and keywords\r\n  - title\r\n- DNS records should be set for\r\n  - google console\r\n  - (auto import to bing console)\r\n- Make sure you have an H1 on your site? ","url":"seo","html":""},{"path":"src\\lib\\text\\devlog\\techs.md","title":"techs","markdown":"# stuff I'm familiar with\n\r\n## Svelte/Kit\r\n\r\n- Static webapp deployments using adapters, CICD patterns and webhook initiated builds\r\n- Coding/testing/troubleshooting reactivity locally and in async/await API consuming patterns\r\n- I don't... think I'll ever use anything else if I can help it\r\n\r\n## Powershell\r\n\r\n- Installing on AWS EC2 \r\n- Piping commands \r\n- Copying/Backing up between remote and local sources\r\n- Scheduling/privileges troubleshooting in Linux CRON and Windows \r\n- Checking directories for attributes, copying and creating files/permissions on a schedule\r\n\r\n## Javascript\r\n\r\n- Managing large JSON i/o \r\n- Comparing values\r\n- Request usage\n- Interacting with APIs\r\n\r\n## AWS\r\n\r\n- Managing Domains/IPs/Virtual Private Cloud \r\n- Maintain Serverless Alexa Apps\r\n- Managing multiple domain configurations\r\n- Deploying server/serverless solutions\r\n  - Lambda functions\r\n  - EC2 Servers/Beanstalk deployments\r\n  - Github to Amplify CI/CD Workflows\r\n\r\n## Github\r\n\r\n- CI/CD Patterns with AWS/Netlify/Others\r\n- Communicating issues to other developers\r\n- Forking/Pulling/Merging\r\n     \r\n## Photoshop\r\n\r\n- Creating marketing materials\r\n  - Posters\r\n  - Ads\r\n  - Logos\r\n- Fixing/editing photographs\r\n- Exporting for commercial printing\r\n\r\n## Davinci Resolve\r\n\r\n- Basic audio / video editing\r\n- Basic overlays, clipping, transitions\r\n- Other fun things for youtube","url":"techs","html":""}]