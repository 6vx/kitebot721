[{"path":"src\\lib\\text\\devlog\\Android.md","title":"Android","markdown":"# android\n\n## How I use my phone\n\nI need to edit anything on my site easily and make/adjust pages and widgets instantly.\n\nOneSync maintains all my file syncing from phone to OneDrive. Once it's there I use RCLONE to handle the second move, usually to an AWS S3 bucket or a copy push build deploy workflow. \n\nText is handled as Markdown files by lightweight app Writer Plus. It's fantastically light, offline, no ads, dark mode, constantly saving. It's great. \n\nAudio is now handled off-phone! YAY! But I can connect my Sony Icd-Ux570 to the phones USB c port and autosync to OneDrive as well. \n\nI still have the watch recorder syncing to the phone over Bluetooth and then onesync sends it to OneDrive. \n\n","url":"android","html":""},{"path":"src\\lib\\text\\devlog\\Bugfixing.md","title":"Bugfixing","markdown":"# bugquest\r\n\r\nWHAT IS GOING ON?! I hadn't noticed that ALL \"I\"s were bugged as I'd fiddled with my game. \r\n\r\nSomehow, when entering all my tiles values into firestore, I'd managed to mis-type one. \r\n\r\nA numeral 1 was showing up as a string '1' but not often enough to trip anything until days later. \r\n\r\nOf course, my brain ... couldn't handle this. \r\n\r\nAnyway, it was a fun little thing to track down. And easy to fix. \r\n\r\nAm pleased. ","url":"bugfixing","html":""},{"path":"src\\lib\\text\\devlog\\Chocolatey.md","title":"Chocolatey","markdown":"# Chocolatey\r\n\r\n## a windows package manager\r\n\r\nI use choco to update as many things as I can. \r\n\r\nI can update node using the following, for example:\r\n\r\n    choco upgrade nodejs -y\r\n\r\nHere's the script I typically run after reinstalling windows:\r\n\r\n    notepad .\\chocolatey.ps1\r\n    # Setting the permissions and install chocolatey must be done separately using the next command.\r\n    # Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\r\n\r\n    # To check your current installs use 'choco list -localonly'\r\n\r\n    choco install adobereader -y\r\n    choco install audacity -y\r\n    choco install calibre -y\r\n    # choco install discord -y\r\n    choco install git -y\r\n    choco install nodejs -y\r\n    choco install deno -y\r\n    choco install notepadplusplus -y\r\n    choco install qbittorrent -y\r\n    choco install powershell-core -y\r\n    choco install telegram -y\r\n    choco install vlc -y\r\n    choco install vscode -y\r\n    choco install dotnet -y\r\n    choco install steam-client -y\r\n    # choco install ffmpeg -y\r\n    choco install 7zip -y\r\n    choco install tor-browser -y\r\n    # choco install session -y\r\n    # choco install inkscape -y\r\n    choco install youtube-dl -y\r\n    # choco install microsoft-teams.install -y\r\n\r\nI've got a few commented out since they've fallen into disuse, but I wanted to leave them in there for when I inevitably go to dig them up again. ","url":"chocolatey","html":""},{"path":"src\\lib\\text\\devlog\\dmx.md","title":"dmx","markdown":"# dmx\n\nThis is a hobby/personal-use website rewrite with the goal of fully detaching all the major elements.\n\nI feel like a lot of the websites that I discarded along the way were disposed of so because I made them monolithic. \n\nNow the goal is to not let that happen again. I've heard the word 'agile' used in tech a lot and, while I don't remember what it means right now, I know that having your data managent, data storage, front end, build and content all split apart makes me feel very agile.\n\nWhen imagined so, and built with this ideal in mind, changing any one piece is no longer a herculean task with many headaches.\n\nIdeally my front end is a composition of a completely separate static front end. It will be fed by a CMS made up of a server (node) running in the cloud (ssl ec2 managed by elastic beanstalk) that interacts with Cloud Firestore (Google's cloud hosted no-SQL database). \n\nI'm mixing these services because I have credits on AWS and have used it to manage domains/routes/servers/functions for years. The Firestore docs are just so nice, I can't help but use it. I'm trying to really keep the read/write low though by...\n\nPreloading with svelte. This is the new way that you get that Sapper-y goodness. If there's a link, at least. I haven't figured out yet how to assign a parameter to be built programmatically yet without actually making an 'a' tag for each one on a hidden component. \n\nTHERE'S GOT TO BE A BETTER WAY! BUT SINCE IT DOESN'T MATTER I'll move on. \n\nSvelte is meant to just be that last blip on the screen from json to your eyeballs. I don't want to do a lot of magic here. I want a lightweight client that can keep track of a session and maybe pick up a notification, that's it. The rest should be separated into the last component. \n\nThe smart build. I realize now that the build step is really where the action is. You can separate your data and make your front end nice and static, but unless you're doing this step right, none of that's gonna matter. \n\nI've generally used whatever the cheapest t2x ec2 instance with rclone in the past to keep things in sync across providers (ie clone your OneDrive to an S3 bucket, or keep a folder in sync across Google drive and dropbox, etc) but I discovered lambda layers while setting it up this time. I haven't tried to implement it yet but it's an obvious project for a lambda that anyone could benefit from. Putting that on a cron schedule instead of running a microservice seems like a no brainer. \n\nThe separate parts then are:\n  - mobility first components and styling\n  - minimal lightweight prebuilt static cdn deploy\n  -  build step with batched cms/db/api calls\n  - cloud managed (revisit this to make it a lambda!) storage \n\n\nSome stuff I encountered that I hadn't before while setting this up:\n  - lambda layers (very exciting) \n  - applying certificates to lambda layers \n  - rclone nodejs\n  - svelte kit preload\n  - svelte kit prefetch \n  - elastic beanstalk configuration\n  - how to have a bad time with service workers\n  ","url":"dmx","html":""},{"path":"src\\lib\\text\\devlog\\Powershell.md","title":"Powershell","markdown":"## summary\r\n\r\n- Installing on AWS EC2 \r\n- Piping commands \r\n- Copying/Backing up between remote and local sources\r\n- Scheduling/privileges troubleshooting in Linux CRON and Windows \r\n- Checking directories for attributes, copying and creating files/permissions on a schedule\r\n\r\n# Daily Script\r\n\r\n## Draw every day\r\n\r\nI had the revelation that I'd draw every day if I got the Surface GO. I didn't. \r\n\r\nThen I decided surely I'd draw every day if I opened my computer to a brand new canvas every day, ready to be doodled upon in even the most lazy attempt at art. \r\n\r\nEnter: Powershell. I made a set of blank, root files for my \"canvas.leo\" and a daily \"journal .md\" and this script, after some wrangling, ended up being executed by the windows scheduler somewhat reliably. \r\n\r\nEnter: RCLONE/EC2/BASH. \"Somewhat reliably\" wasn't good enough. If I turned my computer on later in the day, sometimes it would take a while to execute. Such troublesome behaviour was getting in the way of my zen art habit. \r\n\r\nInstead, I'd perform this \"daily script\" in the cloud on a CRONJOB on an EC2 MICRO instance, and then use RCLONE to sync between my ONEDRIVE account and the local files on the EC2. This was better. \r\n\r\n## Draw Sometimes, Conveniently\r\n\r\n### And do other things, too!\r\n\r\nOf course, in the end, I didn't want to draw every day. And relying on a cloud instance to fuel this unusual behaviour was sort of against my \"less is more\" philosophy when it comes to tech. \r\n\r\nSo now my customized Powershell 7 profile just has a script (synced to the cloud of course) that, when the mood strikes, allows me to type \"Draw\" into the terminal at any time to open a correctly dated \"timestamp.leo\" infinite canvas to doodle on. \r\n\r\nSome other common patterns are immortalized as well, such as a script to update a github repo with a timestamped commit message, or to split a projects Terminal window in 3 with a remote TMUX session, a local server and a command line all in one. \r\n\r\n## Feelings\r\n\r\nPowershell is fun. I would be happy to have more excuses to fiddle with it. ","url":"powershell","html":""},{"path":"src\\lib\\text\\devlog\\RandomJunk.md","title":"RandomJunk","markdown":"# retired webapps\r\n\r\nListing some rando jank I've deployed just so I can zip to it quickly. I wouldn't consider anything here finished or good, this is just for my own reference. \r\n\r\n## [Timelapse Calculator](https://metta.d3l112fu2xzrtu.amplifyapp.com/)\r\n### Svelte, AWS Amplify\r\n\r\nInput some camera settings and output the length of your timelapse. \r\n\r\n## [deathMetta beta](https://metta.d3l112fu2xzrtu.amplifyapp.com/)\r\n### Svelte, Google Firebase/Firestore, AWS Amplify\r\n\r\nThis app was essentially a journal backed by Google's firebase. Any daily activity showed up on main page. Adding/changing content was handled in browser, and used Google authentication to restrict access. \r\n\r\nRandomized splash quote and title every load. \r\n\r\nNow mostly broken because firebase assets timed out. \r\n\r\n## [Kitebot beta](https://metta.d3nbkc9rp0l6tb.amplifyapp.com)\r\n### Sapper, AWS Amplify\r\n\r\nSuper basic routing implemented in Sapper. Was mostly interested in making a Resume in CSS. All static. \r\n\r\n## [Svelte tests](https://master.d38djo7bohyam.amplifyapp.com)\r\n### Sapper, AWS Amplify\r\n\r\nFiddling with sapper, static site. Just jammed a bunch of bits on there to see how they fit together. \r\n\r\n## [Math](https://master.d3vgm2uloi9xn7.amplifyapp.com)\r\n### Sapper, Javascript, AWS Amplify\r\n\r\nI felt like learning some javascript by solving some math problems with it might be sensible. Tried to pop in some CSS as well along the way. Problems hidden behind buttons. Console provides some feedback. \r\n\r\n## [Real Fake Words](https://master.d1ao765rkp1ud6.amplifyapp.com)\r\n### Sapper, Javascript, AWS Amplify\r\n\r\nBroken. Just fiddling with buttons, stores and timers. Did not go well. ","url":"randomjunk","html":""},{"path":"src\\lib\\text\\devlog\\Refactoring.md","title":"Refactoring","markdown":"# 17 months later\r\n\r\nThis is the biggest gap I've ever gone back to retrieve something I've made before. \r\n\r\nGenerally, I'd just write something new, or start over, but I knew that I'd done at least a bit of grunt work and figured it would be... recoverable. \r\n\r\nDigging through the 20+ javascript files figuring out which were essential was the first task. Luckily only half a dozen remained in the root of the project, the others squirreled away inside an aptly named 'scriptsalongtheway' folder. \r\n\r\nFrom the imports I figured out what data sets I'd need to reconstruct this, I'd apparently learned how to put my ./data folder on gitignore. Smart, kinda. Frustrating now. \r\n\r\nThe dataset's creator is proudly trumpeting v4 when I arrive at the website. I groan, and download while checking the notes to see, indeed, that \"v3 is now fully deprecated and (stuff I want) can be found in a new place!\"\r\n\r\nThe 130+MB JSON file downloads. I run my 17 month old script. It fails. \r\n\r\nOnce again i'm working with a dataset that crashes my editor when I look at it too long, and I'm just trying to get up and running with that to mash it into my other 200,000 entry dictionary and make them compare millions of times. My 2012 i7 weeps softly.\r\n\r\nI refactor one script, it executes. On to another. I retrieve the acoompanying data. It executes... but somethings different. \r\n\r\nPerusing the code I discover I had no fucking idea how to work with Objects. I quickly rewrite key sections. It's **actually better** now. \r\n\r\nWith fresh eyes and a little pain on my computer's part (I came back from my bikeride to realize I'd need to redo it with a small adjustment, sorry PC!) we managed to take this shoddy old crap and turn it into something... adequate. Almost. ","url":"refactoring","html":""},{"path":"src\\lib\\text\\devlog\\techs.md","title":"techs","markdown":"# stuff I'm familiar with\r\n\r\n## Svelte/Kit\r\n\r\n- Static webapp deployments using adapters, CICD patterns and webhook initiated builds\r\n- Coding/testing/troubleshooting reactivity locally and in async/await API consuming patterns\r\n- I don't... think I'll ever use anything else if I can help it\r\n\r\n## Powershell\r\n\r\n- Installing on AWS EC2 \r\n- Piping commands \r\n- Copying/Backing up between remote and local sources\r\n- Scheduling/privileges troubleshooting in Linux CRON and Windows \r\n- Checking directories for attributes, copying and creating files/permissions on a schedule\r\n\r\n## Javascript\r\n\r\n- Managing large JSON i/o \r\n- Comparing values\r\n- Request usage\r\n\r\n## AWS\r\n\r\n- Managing Domains/IPs/Virtual Private Cloud \r\n- Maintain Serverless Alexa Apps\r\n- Managing multiple domain configurations\r\n- Deploying server/serverless solutions\r\n  - Lambda functions\r\n  - EC2 Servers\r\n  - Github to Amplify CI/CD Workflows\r\n\r\n## Github\r\n\r\n- CI/CD Patterns with AWS/Netlify/Others\r\n- Communicating issues to other developers\r\n- Forking/Pulling/Merging\r\n     \r\n## Photoshop\r\n\r\n- Creating marketing materials\r\n  - Posters\r\n  - Ads\r\n  - Logos\r\n- Fixing photographs\r\n- Exporting for Printing\r\n\r\n## Davinci Resolve\r\n\r\n- Basic audio / video editing\r\n- Basic overlays, clipping, transitions\r\n- Other fun things for youtube","url":"techs","html":""},{"path":"src\\lib\\text\\devlog\\TimelapseCalculator.md","title":"TimelapseCalculator","markdown":"# basic app\n\n## Standard Setup\n\nI generally grab the default svelte template, set up a github repo for it and connect that to an AWS Amplify project.\n\nThis setup means that every commit will be registered by Amplify and trigger a build and deploy automatically.\n\nSomething special this time, though, will be a script on dev machine that grabs the most recent versions of appropriate static assets and copies them into the project folder **before pushing to github.**\n\n> ### Why push the static files to github\n> I want to try this pattern instead of fetching during build because I don't want to have to manage a remote store of files. \n  >  \n> I've done that before by keeping an rclone script running on an hourly cron job on an ec2 micro instance, keeping the files in sync with my devices and available to the build server. While technically this is a cool and probably better way for a larger or more complex project, it's hardly minimalist. Also, it's hardly in the spirit of \"serverless.\"\n\n\n## Time-lapse Logic\n\nThere are a few main settings to account for, and I've already written out the math I need to keep track of. \n\n1. Frame Recording Rate\n2. Frame Capture Interval\n3. Capture Duration\n4. Timelapse Duration\n\nSo, if you capture for five minutes with a camera that is capturing 1 frame every 2 seconds, and is recording that as a framerate of 30 frames per second, you get a timelapse duration of 5 seconds. \n\n    (60s*5m) / ((2 seconds per frame)*(30 frames per second))\n\n    300 / 60 = 5\n\n## App UI\n\nI want a bit of a \"classic calculator\" look to this, since that is what it is. \n\nInstead of having all sorts of numbers and buttons, though, I want my input to consist of selectors. \n\nThere should be an obvious row of selections for FPS, and when you select one it remains highlighted. \n\nWhen changes have been made but not recalculated, the \"ENTER\" button or something should light up, to make it clear that you need to enter your selections and get a new result. \n\nI'd like basic tweening and fading to make changing between options a more tactile, responsive experience. \n\n## Deployment and Use\n\nI want this to all be contained in a single component for easy use, backup, etc. \n\nI'll deploy as a standalone app example, and also as a clickable object within my portfolio. Since I expect the file to be exceedingly small, I'll likely back it up in a components folder alongside my other static assets I keep synced to my phone/tablet/PC. \n\n## Thoughts\n\nI think that something simple like this is more a piece of evidence that I can make UI, than that I can make an app. This isn't terribly complex. \n\nTherefore the UI must shine. If that's all this represents, make sure that it is representative of YOUR work. It should espouse YOUR sensibilities, not the google material UI spec, not some CSS library spec, none of that. This is me on a page. \n\n## Building\n\nJust placed all the info I wanted onto the page first thing. It's one component. \n\nI set some basic CSS fonts (I love monospace) and colours. Removed some old comments and tightened up the algorithm I was using. \n\nTested to make sure it's working with some console.log() action, now going to do first commit.\n\nCommit was fine, connected repo to amplify and changed the build script to contain the correct build directory (public). Deployed first try, checked to make sure was looking fine on mobile. Does.\n\n","url":"timelapsecalculator","html":""}]